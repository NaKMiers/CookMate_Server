openapi: 3.0.3
info:
  title: CookMate API
  description: |
    CookMate API - A comprehensive cooking and recipe management platform.
    
    ## Features
    - User authentication with Google OAuth
    - Recipe search and management
    - Ingredient tracking and pantry management
    - Shopping list functionality
    - Favorites system
    - User profile management
    
    ## Authentication
    Most endpoints require Bearer token authentication. Get your token by calling the Google Auth endpoint.
    
    **Authentication Required Endpoints:**
    - `/api` - API Welcome message
    - `/api/ingredients` - All CRUD operations
    - `/api/favorites` - All CRUD operations  
    - `/api/profile` - All CRUD operations
    - `/api/shopping` - All CRUD operations
    
    **No Authentication Required:**
    - `/api/auth/google` - Google authentication
    - `/api/recipes/search` - Recipe search
    - `/api/recipes/today` - Today's recipes
    
    ## Base URLs
    - Development: `http://localhost:3000`
    - Production: `https://cookm8.vercel.app`
  version: 1.0.0
  contact:
    name: CookMate Team
    email: support@cookmate.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://cookm8.vercel.app
    description: Production server

security:
  - BearerAuth: []

paths:
  /api:
    get:
      tags:
        - General
      summary: API Welcome
      description: Get welcome message from CookMate API (Requires Authentication)
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hello, Welcome to CookMate API!"
              example:
                message: "Hello, Welcome to CookMate API!"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/google:
    post:
      tags:
        - Authentication
      summary: Google Authentication
      description: Authenticate user with Google OAuth and get JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - googleUserId
                - email
              properties:
                googleUserId:
                  type: string
                  description: Google user ID
                  example: "123456789"
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "user@example.com"
                name:
                  type: string
                  description: User display name
                  example: "John Doe"
                avatar:
                  type: string
                  format: uri
                  description: User avatar URL
                  example: "https://example.com/avatar.jpg"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token for authentication
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/recipes/search:
    get:
      tags:
        - Recipes
      summary: Search Recipes
      description: Search for recipes using various parameters
      security: []
      parameters:
        - name: query
          in: query
          description: Search query for recipes
          required: false
          schema:
            type: string
            example: "pasta"
        - name: number
          in: query
          description: Number of recipes to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: cuisine
          in: query
          description: Cuisine type
          required: false
          schema:
            type: string
            example: "italian"
        - name: diet
          in: query
          description: Dietary restrictions
          required: false
          schema:
            type: string
            example: "vegetarian"
        - name: maxReadyTime
          in: query
          description: Maximum cooking time in minutes
          required: false
          schema:
            type: integer
            example: 30
      responses:
        '200':
          description: Recipes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipes retrieved successfully"
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                  totalResults:
                    type: integer
                    example: 50
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/recipes/today:
    get:
      tags:
        - Recipes
      summary: Get Today's Recipes
      description: Get random recipes for today's meal planning
      security: []
      responses:
        '200':
          description: Today's recipes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipes retrieved successfully"
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                  totalResults:
                    type: integer
                    example: 5
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/ingredients:
    get:
      tags:
        - Ingredients
      summary: Get User Ingredients
      description: Get all ingredients for the authenticated user
      responses:
        '200':
          description: Ingredients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ingredients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ingredient'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Ingredients
      summary: Add Ingredient
      description: Add a new ingredient to user's pantry
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - categoryId
                - quantity
                - unit
              properties:
                name:
                  type: string
                  description: Ingredient name
                  example: "Tomato"
                categoryId:
                  type: string
                  description: Category ID
                  example: "vegetables"
                quantity:
                  type: string
                  description: Quantity
                  example: "5"
                unit:
                  type: string
                  description: Unit of measurement
                  example: "pieces"
                expiryDate:
                  type: string
                  format: date
                  description: Expiry date
                  example: "2024-12-31"
                notes:
                  type: string
                  description: Additional notes
                  example: "Fresh tomatoes"
                image:
                  type: string
                  format: binary
                  description: Ingredient image
      responses:
        '200':
          description: Ingredient added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ingredient:
                    $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Ingredients
      summary: Update Ingredient
      description: Update an existing ingredient
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - ingredientId
                - name
                - categoryId
                - quantity
                - unit
              properties:
                ingredientId:
                  type: string
                  description: Ingredient ID to update
                  example: "64f1a2b3c4d5e6f7g8h9i0j1"
                name:
                  type: string
                  description: Ingredient name
                  example: "Red Tomato"
                categoryId:
                  type: string
                  description: Category ID
                  example: "vegetables"
                quantity:
                  type: string
                  description: Quantity
                  example: "3"
                unit:
                  type: string
                  description: Unit of measurement
                  example: "pieces"
                expiryDate:
                  type: string
                  format: date
                  description: Expiry date
                  example: "2024-12-25"
                notes:
                  type: string
                  description: Additional notes
                  example: "Updated notes"
                image:
                  type: string
                  format: binary
                  description: New ingredient image
      responses:
        '200':
          description: Ingredient updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ingredient:
                    $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Ingredients
      summary: Delete Ingredient
      description: Delete an ingredient from user's pantry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ingredientId
              properties:
                ingredientId:
                  type: string
                  description: Ingredient ID to delete
                  example: "64f1a2b3c4d5e6f7g8h9i0j1"
      responses:
        '200':
          description: Ingredient deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ingredient:
                    $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/favorites:
    get:
      tags:
        - Favorites
      summary: Get User Favorites
      description: Get all favorite recipes for the authenticated user
      responses:
        '200':
          description: Favorites retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                  totalResults:
                    type: integer
                    example: 10
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Favorites
      summary: Add Favorite
      description: Add a recipe to user's favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: string
                  description: Recipe ID to add to favorites
                  example: "12345"
      responses:
        '200':
          description: Favorite added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Favorite added successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Favorites
      summary: Remove Favorite
      description: Remove a recipe from user's favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: string
                  description: Recipe ID to remove from favorites
                  example: "12345"
      responses:
        '200':
          description: Favorite removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Favorite deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/profile:
    get:
      tags:
        - Profile
      summary: Get User Profile
      description: Get authenticated user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Profile
      summary: Update User Profile
      description: Update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's display name
                  example: "John Doe"
                avatar:
                  type: string
                  format: uri
                  description: User's avatar URL
                  example: "https://example.com/avatar.jpg"
                dietaryPreferences:
                  type: array
                  items:
                    type: string
                  description: User's dietary preferences
                  example: ["vegetarian", "gluten-free"]
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/shopping:
    get:
      tags:
        - Shopping
      summary: Get Shopping List
      description: Get user's shopping list
      responses:
        '200':
          description: Shopping list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  shoppingList:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShoppingItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Shopping
      summary: Add Shopping Item
      description: Add a new item to user's shopping list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Item name
                  example: "Milk"
                status:
                  type: string
                  enum: [pending, completed]
                  description: Item status
                  default: pending
                  example: "pending"
                notes:
                  type: string
                  description: Additional notes
                  example: "2% milk"
      responses:
        '200':
          description: Shopping item added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  shoppingItem:
                    $ref: '#/components/schemas/ShoppingItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Shopping
      summary: Update Shopping Item
      description: Update an existing shopping list item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shoppingItemId
                - name
              properties:
                shoppingItemId:
                  type: string
                  description: Shopping item ID to update
                  example: "64f1a2b3c4d5e6f7g8h9i0j1"
                name:
                  type: string
                  description: Item name
                  example: "Organic Milk"
                status:
                  type: string
                  enum: [pending, completed]
                  description: Item status
                  example: "completed"
                notes:
                  type: string
                  description: Additional notes
                  example: "Organic 2% milk"
      responses:
        '200':
          description: Shopping item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  shoppingItem:
                    $ref: '#/components/schemas/ShoppingItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Shopping
      summary: Delete Shopping Item
      description: Delete an item from user's shopping list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shoppingItemId
              properties:
                shoppingItemId:
                  type: string
                  description: Shopping item ID to delete
                  example: "64f1a2b3c4d5e6f7g8h9i0j1"
      responses:
        '200':
          description: Shopping item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Shopping item deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from Google authentication endpoint.
        Include the token in the Authorization header as: `Bearer <token>`

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: "64f1a2b3c4d5e6f7g8h9i0j1"
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        name:
          type: string
          description: User display name
          example: "John Doe"
        avatar:
          type: string
          format: uri
          description: User avatar URL
          example: "https://example.com/avatar.jpg"
        dietaryPreferences:
          type: array
          items:
            type: string
          description: User's dietary preferences
          example: ["vegetarian", "gluten-free"]
        googleUserId:
          type: string
          description: Google user ID
          example: "123456789"
        authType:
          type: string
          enum: [google, email]
          description: Authentication type
          example: "google"
        role:
          type: string
          enum: [user, admin]
          description: User role
          default: user
          example: "user"
        createdAt:
          type: string
          format: date-time
          description: Account creation date
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-01-15T10:30:00Z"

    Recipe:
      type: object
      properties:
        id:
          type: string
          description: Recipe ID
          example: "12345"
        title:
          type: string
          description: Recipe title
          example: "Spaghetti Carbonara"
        image:
          type: string
          format: uri
          description: Recipe image URL
          example: "https://example.com/recipe.jpg"
        readyInMinutes:
          type: integer
          description: Cooking time in minutes
          example: 30
        servings:
          type: integer
          description: Number of servings
          example: 4
        summary:
          type: string
          description: Recipe summary
          example: "A classic Italian pasta dish..."
        instructions:
          type: array
          items:
            type: string
          description: Cooking instructions
          example: ["Boil water", "Add pasta", "Cook for 10 minutes"]
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredient'
        nutrition:
          $ref: '#/components/schemas/Nutrition'
        cuisines:
          type: array
          items:
            type: string
          description: Cuisine types
          example: ["Italian", "Mediterranean"]
        diets:
          type: array
          items:
            type: string
          description: Dietary tags
          example: ["vegetarian", "gluten-free"]

    RecipeIngredient:
      type: object
      properties:
        id:
          type: string
          description: Ingredient ID
          example: "123"
        name:
          type: string
          description: Ingredient name
          example: "Spaghetti"
        amount:
          type: number
          description: Ingredient amount
          example: 500
        unit:
          type: string
          description: Unit of measurement
          example: "g"
        image:
          type: string
          format: uri
          description: Ingredient image URL
          example: "https://example.com/ingredient.jpg"

    Nutrition:
      type: object
      properties:
        calories:
          type: number
          description: Calories per serving
          example: 450
        protein:
          type: number
          description: Protein in grams
          example: 20
        fat:
          type: number
          description: Fat in grams
          example: 15
        carbohydrates:
          type: number
          description: Carbohydrates in grams
          example: 60
        fiber:
          type: number
          description: Fiber in grams
          example: 3
        sugar:
          type: number
          description: Sugar in grams
          example: 5

    Ingredient:
      type: object
      properties:
        _id:
          type: string
          description: Ingredient ID
          example: "64f1a2b3c4d5e6f7g8h9i0j1"
        userId:
          type: string
          description: User ID who owns this ingredient
          example: "64f1a2b3c4d5e6f7g8h9i0j1"
        name:
          type: string
          description: Ingredient name
          example: "Tomato"
        categoryId:
          type: string
          description: Category ID
          example: "vegetables"
        quantity:
          type: string
          description: Quantity
          example: "5"
        unit:
          type: string
          description: Unit of measurement
          example: "pieces"
        expiryDate:
          type: string
          format: date
          description: Expiry date
          example: "2024-12-31"
        image:
          type: string
          format: uri
          description: Ingredient image URL
          example: "https://example.com/tomato.jpg"
        notes:
          type: string
          description: Additional notes
          example: "Fresh tomatoes"
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-01-15T10:30:00Z"

    ShoppingItem:
      type: object
      properties:
        _id:
          type: string
          description: Shopping item ID
          example: "64f1a2b3c4d5e6f7g8h9i0j1"
        userId:
          type: string
          description: User ID who owns this item
          example: "64f1a2b3c4d5e6f7g8h9i0j1"
        name:
          type: string
          description: Item name
          example: "Milk"
        status:
          type: string
          enum: [pending, completed]
          description: Item status
          example: "pending"
        notes:
          type: string
          description: Additional notes
          example: "2% milk"
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-01-15T10:30:00Z"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Something went wrong"

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Missing required fields"

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Something went wrong"

tags:
  - name: General
    description: General API endpoints
  - name: Authentication
    description: User authentication endpoints
  - name: Recipes
    description: Recipe search and management
  - name: Ingredients
    description: Ingredient and pantry management
  - name: Favorites
    description: User favorites management
  - name: Profile
    description: User profile management
  - name: Shopping
    description: Shopping list management
